pub fn event_loop() {
}

pub unsafe fn dealloc( ptr: *mut u8, capacity: usize ) {
    exports::__web_free( ptr, capacity );
}

pub mod exports {
    use std::mem;

    extern "C" {
        pub fn __js_0( code: *const u8 ) -> i32;
        // Autogenerated with the following Ruby script:
        // params = []
        // 1.upto( 17 ) do |nth|
        //     params << "a#{nth}: *const u8"
        //     puts "pub fn __js_#{nth}( #{params.join ', '}, code: *const u8 ) -> i32;"
        // end
        pub fn __js_1( a1: *const u8, code: *const u8 ) -> i32;
        pub fn __js_2( a1: *const u8, a2: *const u8, code: *const u8 ) -> i32;
        pub fn __js_3( a1: *const u8, a2: *const u8, a3: *const u8, code: *const u8 ) -> i32;
        pub fn __js_4( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, code: *const u8 ) -> i32;
        pub fn __js_5( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, code: *const u8 ) -> i32;
        pub fn __js_6( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, code: *const u8 ) -> i32;
        pub fn __js_7( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, code: *const u8 ) -> i32;
        pub fn __js_8( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, code: *const u8 ) -> i32;
        pub fn __js_9( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, code: *const u8 ) -> i32;
        pub fn __js_10( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, code: *const u8 ) -> i32;
        pub fn __js_11( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, code: *const u8 ) -> i32;
        pub fn __js_12( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, code: *const u8 ) -> i32;
        pub fn __js_13( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, a13: *const u8, code: *const u8 ) -> i32;
        pub fn __js_14( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, a13: *const u8, a14: *const u8, code: *const u8 ) -> i32;
        pub fn __js_15( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, a13: *const u8, a14: *const u8, a15: *const u8, code: *const u8 ) -> i32;
        pub fn __js_16( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, a13: *const u8, a14: *const u8, a15: *const u8, a16: *const u8, code: *const u8 ) -> i32;
        pub fn __js_17( a1: *const u8, a2: *const u8, a3: *const u8, a4: *const u8, a5: *const u8, a6: *const u8, a7: *const u8, a8: *const u8, a9: *const u8, a10: *const u8, a11: *const u8, a12: *const u8, a13: *const u8, a14: *const u8, a15: *const u8, a16: *const u8, a17: *const u8, code: *const u8 ) -> i32;
    }

    #[doc(hidden)]
    #[no_mangle]
    pub extern "C" fn __web_malloc( size: usize ) -> *mut u8 {
        let mut buffer = Vec::with_capacity( size );
        let ptr = buffer.as_mut_ptr();
        mem::forget( buffer );
        ptr
    }

    #[doc(hidden)]
    #[no_mangle]
    pub extern "C" fn __web_free( ptr: *mut u8, capacity: usize ) {
        unsafe  {
            let _ = Vec::from_raw_parts( ptr, 0, capacity );
        }
    }
}
